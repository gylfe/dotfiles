" --------------------------------------------------------------
" Plugins Settings
"
"
let OSTYPE = system('uname')
" --------------------------------------------------------------
" watchdogs
" cf. http://d.hatena.ne.jp/osyo-manga/20120924/1348473304
let g:quickrun_config = {
  \ "_": {
    \  "hook/close_buffer/enable_empty_data" : 1,
    \  "hook/close_buffer/enable_failure" : 1,
    \  "hook/close_quickfix/enable_exit" : 1,
    \  "hook/close_quickfix/enable_hook_loaded" : 1,
    \  "hook/close_quickfix/enable_success" : 1,
    \  "hook/close_unite_quickfix/enable_hook_loaded" : 1,
    \  "hook/inu/enable" : 1,
    \  "hook/inu/wait" : 20,
    \  "hook/unite_quickfix/enable_failure" : 1,
    \  "outputter" : "multi:buffer:quickfix",
    \  "outputter/buffer/split" : ":botright 6sp",
    \  "runner" : "vimproc",
    \  "runner/vimproc/updatetime" : 40
    \  }
\}

call watchdogs#setup (g:quickrun_config)

" --------------------------------------------------------------
"vimfiler
"
"set data_directory=ramdisk_directry
" if has('win32')
"   let g:vimfiler_data_directory = 'D:\.vimfiler'
" elseif  has('macunix')
"   let g:vimfiler_data_directory = '/Volumes/RamDisk/.vimfiler'
" else
"   let g:vimfiler_data_directory = '/dev/shm/.vimfiler'
"   "let g:vimfiler_data_directory = $HOME . '/.unite'
" endif

if OSTYPE == "Darwin\n"
  let g:vimfiler_data_directory = '/Volumes/RamDisk/.vimfiler'
elseif OSTYPE == "Linux\n"
  let g:vimfiler_data_directory = '/dev/shm/.vimfiler'
endif


"open current buffer directry
nnoremap <silent> <Leader>fe :<C-u>VimFilerBufferDir -quit<CR>
"open current buffer in IDE like
nnoremap <silent> <Leader>fi :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -no-quit<CR>

"change default keymap
augroup vimrc
    autocmd FileType vimfiler call s:vimfiler_my_settings()
augroup END
function! s:vimfiler_my_settings()
    nmap <buffer> f <Plug>(vimfiler_new_file)
endfunction


let g:vimfiler_as_default_explorer  = 1  "change default filer
let g:vimfiler_safe_mode_by_default = 0  "safe mode無効化
let g:vimfiler_split_rule  = 'topright'
let g:vimfiler_edit_action = 'tabopen'  "open/tabopen

autocmd FileType vimfiler nnoremap <buffer><silent>/ :<C-u>Unite file -default-action=vimfiler<CR>

" ------------------------------------------------------------------
" unite
" 
" unite prefix key.
nnoremap [unite] <Nop>
nmap <Space>f [unite]

let g:unite_enable_start_insert = 0  "not start insertmode

" For ack.
if executable('ack-grep')
    let g:unite_source_grep_command = 'ack-grep'
    let g:unite_source_grep_default_opts = '--no-heading --no-color -a'
    let g:unite_source_grep_recursive_opt = ''
endif

"file_mruの表示フォーマットを指定。空にすると表示スピードが高速化される
let g:unite_source_file_mru_filename_format = ''

"data_directory はramdiskを指定
if has('win32')
    let g:unite_data_directory = 'C:\.unite'
elseif  has('macunix')
    let g:unite_data_directory = '/Volumes/RamDisk/.unite'
else
    let g:unite_data_directory = '/dev/shm/.unite'
    "let g:unite_data_directory = $HOME . '/.unite'
endif
 
"現在開いているファイルのディレクトリ下のファイル一覧。
"開いていない場合はカレントディレクトリ
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
"バッファ一覧
nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
"レジスタ一覧
nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
"最近使用したファイル一覧
nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
"ブックマーク一覧
nnoremap <silent> [unite]c :<C-u>Unite bookmark<CR>
"ブックマークに追加
nnoremap <silent> [unite]a :<C-u>UniteBookmarkAdd<CR>
"uniteを開いている間のキーマッピング
augroup vimrc
    autocmd FileType unite call s:unite_my_settings()
augroup END
function! s:unite_my_settings()
    "ESCでuniteを終了
    nmap <buffer> <ESC> <Plug>(unite_exit)
    "入力モードのときjjでノーマルモードに移動
    imap <buffer> jj <Plug>(unite_insert_leave)
    "入力モードのときctrl+wでバックスラッシュも削除
    imap <buffer> <C-w> <Plug>(unite_delete_backward_path)
    "sでsplit
    nnoremap <silent><buffer><expr> s unite#smart_map('s', unite#do_action('split'))
    inoremap <silent><buffer><expr> s unite#smart_map('s', unite#do_action('split'))
    "vでvsplit
    nnoremap <silent><buffer><expr> v unite#smart_map('v', unite#do_action('vsplit'))
    inoremap <silent><buffer><expr> v unite#smart_map('v', unite#do_action('vsplit'))
    "fでvimfiler
    nnoremap <silent><buffer><expr> f unite#smart_map('f', unite#do_action('vimfiler'))
    inoremap <silent><buffer><expr> f unite#smart_map('f', unite#do_action('vimfiler'))
endfunction

"bookmarkだけホームディレクトリに保存
let g:unite_source_bookmark_directory = $HOME . '/.unite/bookmark'
call unite#custom_default_action('source/bookmark/directory', 'vimfiler')

" ----------------------------------------------------------------------
" CtrlP
"
let g:ctrlp_by_buffer = 1
let g:ctrlp_by_filename = 1
let g:ctrlp_cache_dir = '/dev/shm/.cache/ctrlp'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_custom_ignore = '\.git$\|\.svn$\|\/neocon$'
let g:ctrlp_extensions =['dir', 'bookmarkdir', 'cmdline', 'yankring', 'menu']
let g:ctrlp_highlight_match = [1, 'IncSearch']
let g:ctrlp_max_depth = 15 "検索深度
let g:ctrlp_mruf_max = 500 "
let g:ctrlp_open_multi = '5t' "複数ファイルを開くときでtabで最大8tab
let g:ctrlp_open_new_file = 'r' " r=newtab, h=horizontal, v=vertical, r=currentW
let g:ctrlp_open_new_file = 1 "新規ファイルをtabで開く
let g:ctrlp_show_hidden = 1 "to show dotfiles"
set wildignore+=*.swp,*.zip  " **/tmp/
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*.so,*.swp/*.DS_Store  " Linux/MacOSX
set wildignore+=.git\*,.hg\*,.svn\*,*.dll,*.exe  " Windows


" -----------------------------------------------------------------------
"Memolist
"
if has('macunix')
  let g:memolist_path = "~/var/dropbox/code/Dropbox/docs/memo"
elseif has('unix')
  let g:memolist_path = "~/dict/dropbox/code/Dropbox/docs/memo"
endif

let g:memolist_template_dir_path = "~/.vim/template/memolist"
let g:memolist_memo_suffix = "md"
"let g:memolist_memo_suffix = "txt"
let g:memolist_prompt_tags = 1
let g:memolist_prompt_categories = 0
let g:memolist_memo_date = "%Y-%m-%d %H:%M"
let g:memolist_vimfiler = 1
let g:memolist_qfixgrep = 1

map ;mn :MemoNew<CR>
map ;ml :exec "CtrlP" g:memolist_path<CR><f5>
map ;mg :MemoGrep<CR>

" -------------------------------------------------------------------
" Simplenote
" Evernote
if filereadable('~/.vim/vimset/.vimrc.pass')
  source ~/.vim/vimset/.vimrc.pass
endif
" -------------------------------------------------------------------
" IM Control
"
"let IM_CtrlIBusPython = 1
"set timeout timeoutlen=30000 ttimeoutlen=100

" -------------------------------------------------------------------
" iBus-vim
if has('macunix') || ('win32') || ('win32unix') || ('win64')
else
  inoremap <silent> <Esc> <Esc>:<C-u>call ibus#disable()<CR>
  inoremap <silent> <C-\><C-o>:<C-u>call ibus#toggle()<CR>
  set statusline=[%{ibus#is_enabled()?'あ':'aA'}] 
endif

" -------------------------------------------------------------------
" Ruby Refarence 'refe'
"
let g:ref_open = 'vsplit'
let g:ref_refe_cmd = "rurema"
let g:ref_refe_version = 2

nnoremap ,rr :<C-U>Ref refe<Space>

" ---------------------------------------------------------------------
" vim-indent-guides
" 
let g:indent_guides_auto_colors = 0 "自動カラー無効化
let g:indent_guides_color_change_percent = 10
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
hi IndentGuidesEven ctermbg=256
hi IndentGuidesOdd ctermbg=256


" ---------------------------------------------------------------------
" milkode
" 
command! -nargs=1 Gmilk call s:Gmilk("gmilk -a -n 200", <f-args>)

function! s:Gmilk(cmd, arg)
    silent execute "cgetexpr system(\"" . a:cmd . " ". a:arg . "\")"
    if len(getqflist()) == 0
        echohl WarningMsg
        echomsg "No match found."
        echohl None
    else
        execute "Unite -auto-preview quickfix"
        redraw!
    endif
endfunction

" ---------------------------------------------------------------------
" yank
" 

" "" YankRing
" let g:yankring_history_dir = '$HOME/.tmp'
"     "let g:yankring_history_file = 'yankring.log'
" let g:yankring_max_history = 7
" let g:yankring_ignore_duplicate = 1
" nmap ,y :YRShow<CR>
nmap ,y :CtrlPYankring<CR>
" let g:yankring_paste_n_akey = "NONE"
" let g:yankring_paste_n_bkey = "NONE"

"" Yanktmp
" map <silent> sy :call YanktmpYank()<CR>
" map <silent> sp :call YanktmpPaste_p()<CR>
" map <silent> sP :call YanktmpPaste_P()<CR>

